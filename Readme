# Personalized Notification System - Architecture Overview

## ðŸ›  System Overview

A simple microservices-based project for sending personalized notifications on an e-commerce platform. Everything runs through Docker containers, communicating via RabbitMQ, and exposed through a single GraphQL API Gateway.

### âœ… Microservices:

- **User Service** â€” user signup, preferences, and profile
- **Notification Service** â€” stores and sends notifications
- **Order Service** â€” manages mock orders and emits order updates
- **Product Service** â€” handles product data and simple recommendations
- **GraphQL API Gateway** â€” unified client interface, JWT-based authentication
- **RabbitMQ** â€” messaging system for async communication

## ðŸ“¸ Architecture Diagram

> *(Attach a simple hand-drawn or whiteboard-style system design image in the repository folder)*

##  Quick Start Guide (Code)

**1. Clone the repository:**
```bash
git clone https://github.com/akhilsaisriram/pratilipi_intern.git
cd pratilipi_intern
```

**2. Add a `.env` file in the root directory:**
```env
MONGO_USERNAME=your_mongo_username
MONGO_PASSWORD=your_mongo_password
MONGO_PORT=27017
JWT_SECRET=your_secret_key
BASE_URL=http://<your-ip>
```

**3. Build and run all services:**
```bash
docker-compose build
docker-compose up
```

**4. Access URLs:**
- User Service: `http://<your-ip>:3000`
- Notification Service: `http://<your-ip>:3001`
- Order Service: `http://<your-ip>:3002`
- Product Service: `http://<your-ip>:3003`
- GraphQL Gateway: `http://<your-ip>:8080/graphql`
- RabbitMQ Dashboard: `http://<your-ip>:15672` (guest / guest)

## ðŸ¤–How It Works

- Services communicate asynchronously using RabbitMQ.
- The GraphQL Gateway fetches and aggregates data from services.

##  Testing

- Test using GraphQL Playground at `http://localhost:8080/graphql` or use the provided Postman collection.


