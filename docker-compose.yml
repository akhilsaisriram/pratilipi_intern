version: '3.8'

services:
  users-service:
    build: ./users-service
    container_name: users-service
    restart: unless-stopped
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=users_db
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "3000:3000"
    volumes:
      - ./users-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - rabbitmq
    command: npm run server

  notification-service:
    build: ./notification-service
    container_name: notification-service
    restart: unless-stopped
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=notifications_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "3001:3001"
    volumes:
      - ./notification-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - rabbitmq
    command: npm run server

  order-service:
    build: ./order-service
    container_name: order-service
    restart: unless-stopped
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=order_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "3002:3002"
    volumes:
      - ./order-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - rabbitmq
    command: npm run server

  product-service:
    build: ./product-service
    container_name: product-service
    restart: always
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=product_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "3003:3003"
    volumes:
      - ./product-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - microservices-network
    depends_on:
      mongodb:
        condition: service_started        
      rabbitmq:
        condition: service_healthy

    command: npm run server



  apigateway:
    build: ./apigateway
    container_name: apigateway
    restart: unless-stopped
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=apigateway_db
      - JWT_SECRET=${JWT_SECRET}
      - BASE_URL=${BASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "8080:8080"
    volumes:
      - ./apigateway:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - rabbitmq
    command: npm run server

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - microservices-network

    command: mongod --quiet --logpath /dev/stdout --logappend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  microservices-network:
    driver: bridge

volumes:
  mongodb-data:
  rabbitmq-data:
